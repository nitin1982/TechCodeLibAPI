// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechCodeLib.DAL;

namespace TechCodeLib.DAL.Migrations
{
    [DbContext(typeof(TechCodeLibContext))]
    [Migration("20201126195658_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TechCodeLib.DAL.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactNo = "2173438626",
                            Email = "nitin.rastogi@live.in",
                            FirstName = "Nitin",
                            LastName = "Rastogi",
                            Password = "Test@123"
                        });
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.ContentLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContentLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic/Beginer's Level for content",
                            Name = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Intermediate Level for content",
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Advanced Level for content",
                            Name = "Advance"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Professional Level for content",
                            Name = "Professional"
                        });
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("ContentLevelId")
                        .HasColumnType("int");

                    b.Property<decimal>("CourseDuration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ContentLevelId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            ContentLevelId = 1,
                            CourseDuration = 190m,
                            CreatedOn = new DateTime(2020, 11, 26, 14, 56, 57, 562, DateTimeKind.Local).AddTicks(9095),
                            Description = "A very easy introductory course in C# for beginners.",
                            IsActive = true,
                            LanguageId = 1,
                            Name = "C# Beginer's Course",
                            SubjectId = 1,
                            Tags = "C#, .Net"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 1,
                            ContentLevelId = 2,
                            CourseDuration = 180m,
                            CreatedOn = new DateTime(2020, 11, 26, 14, 56, 57, 565, DateTimeKind.Local).AddTicks(8084),
                            Description = "C# Intermediate Course with Windows Application Project",
                            IsActive = true,
                            LanguageId = 1,
                            Name = "C# Intermediate Course with Windows Application Project",
                            SubjectId = 1,
                            Tags = "C#, .Net, Winform"
                        });
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DocUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hindi"
                        });
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("RatingStar")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CourseId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Introduction",
                            Duration = 1m,
                            Name = "Introduction"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Introduction",
                            Duration = 1m,
                            Name = "Introduction"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            Description = "OOP Programming",
                            Duration = 1m,
                            Name = "OOP Programming"
                        });
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentSubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C# .Net"
                        });
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbedLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SectionId");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            CreatedOn = new DateTime(2020, 11, 26, 14, 56, 57, 566, DateTimeKind.Local).AddTicks(1617),
                            Description = "Introduction to C# and .Net Framework",
                            EmbedLink = "",
                            IsActive = true,
                            Length = 10.25m,
                            Name = "Introduction to C# and .Net Framework",
                            Rating = 1,
                            SectionId = 1,
                            Tags = "C#, .Net Framework"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 1,
                            CreatedOn = new DateTime(2020, 11, 26, 14, 56, 57, 566, DateTimeKind.Local).AddTicks(3562),
                            Description = "Introduction to C# and .Net Framework",
                            EmbedLink = "",
                            IsActive = true,
                            Length = 10.25m,
                            Name = "Introduction to C# and .Net Framework",
                            Rating = 1,
                            SectionId = 1,
                            Tags = "C#, .Net Framework"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 1,
                            CreatedOn = new DateTime(2020, 11, 26, 14, 56, 57, 566, DateTimeKind.Local).AddTicks(3622),
                            Description = "OOP In Detail",
                            EmbedLink = "",
                            IsActive = true,
                            Length = 10.25m,
                            Name = "OOP In Detail",
                            Rating = 1,
                            SectionId = 3,
                            Tags = "C#, OOP"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 1,
                            CreatedOn = new DateTime(2020, 11, 26, 14, 56, 57, 566, DateTimeKind.Local).AddTicks(3777),
                            Description = "C# Data Type",
                            EmbedLink = "",
                            IsActive = true,
                            Length = 15.25m,
                            Name = "C# Data Type",
                            Rating = 1,
                            SectionId = 3,
                            Tags = "C#, .Net Framework"
                        });
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Course", b =>
                {
                    b.HasOne("TechCodeLib.DAL.Entities.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechCodeLib.DAL.Entities.ContentLevel", "ContentLevel")
                        .WithMany()
                        .HasForeignKey("ContentLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechCodeLib.DAL.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechCodeLib.DAL.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ContentLevel");

                    b.Navigation("Language");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Review", b =>
                {
                    b.HasOne("TechCodeLib.DAL.Entities.AppUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("TechCodeLib.DAL.Entities.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Section", b =>
                {
                    b.HasOne("TechCodeLib.DAL.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId");

                    b.HasOne("TechCodeLib.DAL.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Course");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Subject", b =>
                {
                    b.HasOne("TechCodeLib.DAL.Entities.Subject", "ParentSubject")
                        .WithMany()
                        .HasForeignKey("ParentSubjectId");

                    b.Navigation("ParentSubject");
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Video", b =>
                {
                    b.HasOne("TechCodeLib.DAL.Entities.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechCodeLib.DAL.Entities.Section", "Section")
                        .WithMany("Videos")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Course", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("TechCodeLib.DAL.Entities.Section", b =>
                {
                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
